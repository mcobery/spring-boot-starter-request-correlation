plugins {
  id "com.github.hierynomus.license" version "0.16.1"
  id 'com.github.kt3k.coveralls' version '2.12.2'
  id "com.diffplug.spotless" version "6.21.0"
  id 'java-library'
  id 'maven-publish'
  id 'nebula.release' version '19.0.10'
  id 'signing'
}

ext {
  versions = [
      'assertj'           : '3.24.2',
      'commons'           : [
          'lang3': '3.14.0'
      ],
      'feign'             : '12.4',
      'google'              : [
          'format'            : '1.19.1'
      ],      'junit'             : '4.13.2',
      'mockito'           : '5.13.0',
      'spring'            : [
          'boot'          : '3.3.3',
          'feign'         : '4.1.3'
      ],
  ]
}

apply plugin: 'java-library'
apply plugin: "jacoco"
apply plugin: 'idea'

apply from: 'license.gradle'
//apply from: 'release.gradle'

apply plugin: 'pmd'

apply plugin: 'com.github.kt3k.coveralls'

apply from: "${rootProject.projectDir}/gradle/spotless.gradle"

// Release version that won't conflict with the bintray plugin
group = 'com.tipsymcstagger'
archivesBaseName = "spring-boot-starter-request-correlation"


repositories {
  mavenCentral()
}

configurations {
  archives
}

compileJava {
  options.fork = true
}

dependencies {
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${versions.spring.boot}"

  api "org.apache.commons:commons-lang3:${versions.commons.lang3}"

  // For Spring RestTemplate
  implementation "org.springframework.boot:spring-boot-starter-web:${versions.spring.boot}"
  // For Spring WebClient
  implementation "org.springframework.boot:spring-boot-starter-webflux:${versions.spring.boot}"

  // For Feign
  implementation "io.github.openfeign:feign-hc5:${versions.feign}"
  implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${versions.spring.feign}"

  testImplementation "org.assertj:assertj-core:${versions.assertj}"
  testImplementation "org.mockito:mockito-core:${versions.mockito}"
  testImplementation "org.mockito:mockito-junit-jupiter:${versions.mockito}"
  testImplementation "org.springframework.boot:spring-boot-starter-test:${versions.spring.boot}"

}

test {
  useJUnitPlatform {
    includeEngines 'junit-jupiter'
  }

  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
  }
}

tasks.register('createProperties') {
  doLast {
    new File("$projectDir/src/main/resources/version.properties").withWriter { w ->
      Properties p = new Properties()
      p['version'] = project.version.toString()
      p.store w, null
    }
  }
}

classes {
  dependsOn createProperties
}

jar {
  manifest {
    attributes(
        "Implementation-Title": project.name,
        "Implementation-Version": version,
        "Implementation-Vendor": "Marc Cobery",
        "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
        "Gradle-Version": GradleVersion.current().toString()
    )
  }
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

nebulaRelease {
  addReleaseBranchPattern('master')
}

java {
  withJavadocJar()
  withSourcesJar()
}

ext.admin = System.getenv("MAVEN_USERNAME")

signing {
  required { admin }
  def signingKey = System.getenv("GPG_SIGNING_KEY")
  def signingPassword = System.getenv("GPG_SIGNING_PASSPHRASE")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications
}

//
// MAVEN
//

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      pom {
        name = 'spring-boot-starter-request-correlation'
        description = rootProject.description
        url = 'https://github.com/mcobery/spring-boot-starter-request-correlation'
        licenses {
          license {
            name = 'Apache License'
            url = 'https://github.com/mcobery/spring-boot-starter-request-correlation/blob/master/LICENSE'
            distribution = 'repo'
          }
        }
        developers {
          developer {
            id = 'mcobery'
            name = 'Marc Cobery'
            email = 'marc@tipsymcstagger.com'
          }
        }
        scm {
          connection = 'scm:git:git@github.com:mcobery/spring-boot-starter-request-correlation.git'
          developerConnection = 'scm:git@github.com:mcobery/spring-boot-starter-request-correlation.git'
          url = 'https://github.com/mcobery/spring-boot-starter-request-correlation'
        }
      }
    }
  }
  repositories {
    maven {
      name = "OSSRH"
      if (admin) {
        credentials {
          username = System.getenv("MAVEN_USERNAME")
          password = System.getenv("MAVEN_PASSWORD")
        }
      }
      def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
      def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
      url = version.toString().toUpperCase().contains('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
  }
  tasks.release.dependsOn build
}
